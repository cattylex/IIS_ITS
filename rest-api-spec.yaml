openapi: 3.0.0

info:
  version: "1.0.0"
  title: its-rest-api

servers:
  - url: https://its.com

security:
  - ApiKey: []

paths:
  /api/login:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: 'Kuco'
                password:
                  type: string
                  example: 'heslo123'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibG9naW4iLCJyb2xlIjoiYWRtaW4ifQ.5-jg_jd7_SGrATERPfuMHdMg-HvE5e_PyLB6oqIAn3s'
                  logged_as:
                    type: string
                    example: 'admin'


  /api/tickets:
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'

        404:
          $ref: '#/components/responses/NotFound'

    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  example: 4
                product:
                  type: integer
                  example: 8
                product_part:
                  nullable: true
                  type: integer
                  example: 43
                name:
                  type: string
                  example: 'ticket name'
                descr:
                  type: string
                  example: 'ticket description is vety impotant because it gives us description of ticket. -stupid ball'

      responses:
        200:
          description: OK

  /api/tickets/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'

        404:
          $ref: '#/components/responses/NotFound'

    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  type: integer
                  example: null
                product_part:
                  type: integer
                  example: null
                name:
                  type: string
                  example: 'Changed Name'
                descr:
                  type: string
                  example: null

      responses:
        200:
          description: OK

    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK

  /api/tickets/{id}/comments:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'

        404:
          $ref: '#/components/responses/NotFound'

    post:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: integer
                  example: 62
                text:
                  type: string
                  example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'

      responses:
        200:
          description: OK

  /api/tickets/{id}/comments/{c_id}:
    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

        - in: path
          name: c_id
          required: true
          schema:
            type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: 'I changed my mind, now i think this.'
      responses:
        200:
          description: OK

    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

        - in: path
          name: c_id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK


  /api/tickets/{id}/tasks:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'

        404:
          $ref: '#/components/responses/NotFound'

    post:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: integer
                  example: 4
                name:
                  type: string
                  example: 'task name'
                descr:
                  type: string
                  example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'
                ewt:
                  type: integer
                  example: 12

      responses:
        200:
          description: OK

  /api/tickets/{id}/tasks/{t_id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: t_id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

        404:
          $ref: '#/components/responses/NotFound'

    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

        - in: path
          name: t_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: integer
                  example: null
                name:
                  type: string
                  example: null
                descr:
                  type: string
                  example: null
                ewt:
                  type: integer
                  example: 100
                ats:
                  type: string
                  example: 50
      responses:
        200:
          description: OK

    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

        - in: path
          name: t_id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK


  /api/products:
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'New Product'
                manager:
                  type: integer
                  example: 10
                descr:
                  type: string
                  example: 'Bla Bla Bla...'
      responses:
        200:
          description: OK

  /api/products/{id_product}:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Product'
                - type: object
                  properties:
                    descr:
                      type: string
                      example: 'This is the product.'
    patch:
      parameters:
        - in: path
          name: id_product
          required: true
          schema:
            type: integer
            example: 42

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: null
                manager:
                  type: integer
                  example: null
                descr:
                  type: string
                  example: 'Updated product'

      responses:
        200:
          description: OK

    delete:
      parameters:
        - in: path
          name: id_product
          required: true
          schema:
            type: integer
            example: 42
      responses:
        200:
          description: OK

  /api/products/{id_product}/parts:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPartList'

    post:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'New Product Part'
                manager:
                  type: integer
                  example: 10
                descr:
                  type: string
                  example: 'Bla Bla Bla...'
      responses:
        200:
          description: OK

  /api/products/{id_product}/parts/{id_part}:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
          type: integer
          example: 42

      - in: path
        name: id_part
        required: true
        schema:
          type: integer
          example: 1

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ProductPart'
                - type: object
                  properties:
                    descr:
                      type: string
                      example: 'This is the part of the product.'

    patch:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
          type: integer
          example: 42

      - in: path
        name: id_part
        required: true
        schema:
          type: integer
          example: 1

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: null
                manager:
                  type: integer
                  example: null
                descr:
                  type: string
                  example: 'Updated product'

      responses:
        200:
          description: OK

    delete:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
          type: integer
          example: 42

      - in: path
        name: id_part
        required: true
        schema:
          type: integer
          example: 1

      responses:
        200:
          description: OK

  /api/products/{id_product}/tickets:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'

  /api/products/{id_product}/parts/{id_part}/tickets:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      - in: path
        name: id_part
        required: true
        schema:
            type: integer
            example: 1

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'

  /api/users:
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /api/users/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
              type: integer
              example: 100
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Ticket_detail:
      type: object
      properties:
        ticket_id:
          type: number
          example: 69
        author_nickname:
          type: string
          example: 'Van Gogh'
        author_id:
          type: integer
          example: 47
        name:
          type: string
          example: 'Problem with opening my app'
        state:
          type: string
          example: 'SOLVED'

    Ticket:
      allOf:
      - $ref: '#/components/schemas/Ticket_detail'
      - type: object
        properties:
          creation_date:
            type: string
            format: date-time
          product_id:
            type: number
            example: 42
          product_name:
            type: string
            example: "pruhovane podkolienky"
          part_id:
            type: number
            example: null
          part_name:
            type: string
            example: null
          description:
            type: string
            example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.'
          images:
            type: array
            items:
              type: integer
            example: [1,2,3]

    Tickets:
      type: array
      items:
        allOf:
        - type: object
        - $ref: '#/components/schemas/Ticket_detail'


    Comments:
      type: array
      items:
        allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 9
            author:
              type: string
              example: 'Jack Mandella'
            author_id:
              type: integer
              example: 102
            creation_date:
              type: string
              format: date-time
            text:
              type: string
              example: 'Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.'

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 3
        ticket:
          type: integer
          example: 42
        author:
          type: integer
          example: 89
        name:
          type: string
          example: 'Task: create user database'
        descr:
          type: string
          example: 'At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. '
        state:
          type: string
          example: 'IN PROGRESS'
        ewt:
          type: integer
          example: 30
        ats:
          type: integer
          example: 38
        created:
          type: string
          example: '2000-10-26 15:03:58'
        employee:
          type: string
          example: 'guy working on this task'

    Tasks:
      type: array
      items:
        allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 0
            author_id:
              type: integer
              example: 8
            author_nickname:
              type: string
              example: 'John Wick'
            name:
              type: string
              example: 'Task: scan device 435'
            state:
              type: string
              example: 'DONE'

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 42
        name:
          type: string
          example: 'Product'
        manager:
          type: integer
          example: 10

    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'

    ProductPart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Product Part'
        manager:
          type: integer
          example: 10

    ProductPartList:
      type: array
      items:
        $ref: '#/components/schemas/ProductPart'

    UserType:
      type: string
      enum: ['customer', 'employee', 'manager', 'executive', 'admin']

    User:
      type: object
      properties:
        name:
          type: string
          example: 'John Cena'
        mail:
          type: string
          example: 'john@gmail.com'
        login:
          type: string
          example: 'john420'
        password:
          type: string
          format: bytes
          example: "12345"
        type:
          $ref: '#/components/schemas/UserType'

    UserList:
      type: array
      items:
        allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 10
            name:
              type: string
              example: 'John Cena'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
