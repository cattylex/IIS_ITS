openapi: 3.0.0

info:
  version: "1.0.0"
  title: its-rest-api

servers:
  - url: https://its.com

security:
  - ApiKey: []

paths:
  /api/tickets:
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'

  /api/tickets/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'

  /api/tickets/{id}/comments:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'

  /api/products:
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'New Product'
                manager:
                  type: integer
                  example: 10
                descr:
                  type: string
                  example: 'Bla Bla Bla...'

      responses:
        200:
          description: OK

  /api/products/{id_product}:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Product'
                - type: object
                  properties:
                    descr:
                      type: string
                      example: 'This is the product.'

  /api/products/{id_product}/parts:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPartList'

    post:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'New Product Part'
                manager:
                  type: integer
                  example: 10
                descr:
                  type: string
                  example: 'Bla Bla Bla...'
      responses:
        200:
          description: OK


  /api/products/{id_product}/parts/{id_part}:
    get:
      parameters:
      - in: path
        name: id_product
        required: true
        schema:
            type: integer
            example: 42

      - in: path
        name: id_part
        required: true
        schema:
            type: integer
            example: 1

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ProductPart'
                - type: object
                  properties:
                    descr:
                      type: string
                      example: 'This is the part of the product.'

  /api/users:
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /api/users/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
              type: integer
              example: 100
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Ticket_detail:
      type: object
      properties:
        ticket_id:
          type: number
          example: 69
        author_nickname:
          type: string
          example: 'Van Gogh'
        name:
          type: string
          example: 'Problem with opening my app'
        state:
          type: string
          example: 'SOLVED'

    Ticket:
      allOf:
      - $ref: '#/components/schemas/Ticket_detail'
      - type: object
        properties:
          creation_date:
            type: string
            format: date-time
          product_id:
            type: number
            example: 42
          description:
            type: string
            example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.'
          images:
            type: array
            items:
              type: integer
            example: [1,2,3]

    Tickets:
      type: array
      items:
        allOf:
        - type: object
        - $ref: '#/components/schemas/Ticket_detail'


    Comments:
      type: array
      items:
        allOf:
        - type: object
          properties:
            author:
              type: string
              example: 'Jack Mandella'
            creation_date:
              type: string
              format: date-time
            text:
              type: string
              example: 'Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.'

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 42
        name:
          type: string
          example: 'Product'
        manager:
          type: integer
          example: 10

    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'

    ProductPart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Product Part'
        manager:
          type: integer
          example: 10

    ProductPartList:
      type: array
      items:
        $ref: '#/components/schemas/ProductPart'

    UserType:
      type: string
      enum: ['customer', 'employee', 'manager', 'executive', 'admin']

    User:
      type: object
      properties:
        name:
          type: string
          example: 'John Cena'
        mail:
          type: string
          example: 'john@gmail.com'
        login:
          type: string
          example: 'john420'
        password:
          type: string
          format: bytes
          example: "12345"
        type:
          $ref: '#/components/schemas/UserType'

    UserList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 10
          name:
            type: string
            example: 'John Cena'

    TaskList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 100
          name:
            type: string
            example: 'Task Name'
          author:
            type: string
            example: 'John Cena'
          state:
            type: string
            example: 'GOOD'

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 100
        name:
          type: string
          example: 'Task Name'
        descr:
          type: string
          example: 'Task description.'
        author:
          type: string
          example: 'John Cena'
        ewt:
          type: number
          example: 10
        state:
          type: string
          example: 'IN PROGRESS'
        ats:
          type: number
          example: 2
        created:
          type: string
          format: date-time
